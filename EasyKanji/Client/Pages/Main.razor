@page "/main/{SectionId?}"
@inject NavigationManager NavigationManager
@using EasyKanji.Shared;
@using EasyKanji.Client.Shared;
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http

<MainSectionNav SectionId="@SectionId" />

<a class="learn-switch" href="/learn/by-meaning">
    <p>Начать изучение</p>
    <img src="graduate-cap.svg" width="45" height="45" />
    </a>

@switch (SectionId)
{
    case "popular":
        <PageTitle>Популярные кандзи - EasyKanji</PageTitle>
        <KanjiTable TableData="popularKanji" />
        break;
    case "saved":
        <PageTitle>Сохранённые кандзи - EasyKanji</PageTitle>
        <KanjiTable TableData="savedKanji" />
        break;
    case "search":
        <PageTitle>Поиск кандзи - EasyKanji</PageTitle>
        <form id="search" onsubmit="return false">
            <input type="text" name="s" placeholder="Введите запрос" value="@SearchText"
                @oninput="(e) => {if (e.Value != null) SearchText = e.Value.ToString();}" required>
            <button type="submit" @onclick="() => FetchSearchResult(SearchText)">
                <img src="lupa.svg" width="29" height="29" />
            </button>
        </form>
        <KanjiTable TableData="searchResult" />
        break;
}

@code
{
    [Parameter]
    public string? SectionId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "s")]
    public string? SearchText { get; set; }

    private List<Kanji>? popularKanji;
    private List<Kanji>? savedKanji;
    private List<Kanji>? searchResult;

    protected override async void OnInitialized()
    {
        if (SectionId == null)
        {
            NavigationManager.NavigateTo("/main/popular");
        }

        if (SectionId == "search") await FetchSearchResult(SearchText);
        else
        {
            await FetchPopularKanji();
            // + Fetch saved
        }
    }

    private async Task FetchPopularKanji(int fromId = 0, int count = 200)
    {
        if (fromId < 0 || count < 1) return;
        //popularKanji = await Http.GetFromJsonAsync<List<Kanji>>($"url/api/kanjis?fromid={fromId}&count={count}");
    }

    //private async Task FetchSavedKanji(int fromId = 0, int count = 200) { }

    private async Task FetchSearchResult(string? query)
    {
        if (query == null || query == "") return;
        NavigationManager.NavigateTo($"/main/search?s={SearchText}");
        //searchResult = await Http.GetFromJsonAsync<List<Kanji>>($"url/api/kanjis/search?query={query}");
    }
}